#include <Keypad.h>

// Определение пинов
const int PIR_PIN = 2;      // PIR датчик
const int LED_PIN = 3;      // LED индикатор
const int BUZZER_PIN = 4;   // Пьезо-излучатель

// Настройка клавиатуры
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {5, 6, 7, 8};     // Пины для строк
byte colPins[COLS] = {9, 10, 11, 12};  // Пины для столбцов
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// Параметры системы
const String CORRECT_PASSWORD = "1234"; // Правильный пароль
String entered_password = "";           // Введенный пароль
bool system_armed = false;             // Состояние системы (включена/выключена)
bool alarm_triggered = false;          // Состояние тревоги
unsigned long alarm_start_time = 0;    // Время начала тревоги
const unsigned long ALARM_DURATION = 30000; // Длительность тревоги (30 секунд)

// Звуковые сигналы
const int BEEP_DURATION = 100;         // Длительность короткого сигнала
const int ERROR_BEEP_DURATION = 1000;  // Длительность сигнала ошибки

void setup() {
  // Инициализация пинов
  pinMode(PIR_PIN, INPUT);
  pinMode(LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  
  Serial.begin(9600);
  Serial.println("System Started");
  
  // Начальный сигнал
  beep(BEEP_DURATION);
}

void loop() {
  char key = keypad.getKey();
  
  // Обработка нажатий клавиатуры
  if (key) {
    processKey(key);
  }
  
  // Проверка датчика движения
  if (system_armed && !alarm_triggered) {
    if (digitalRead(PIR_PIN) == HIGH) {
      triggerAlarm();
    }
  }
  
  // Управление тревогой
  if (alarm_triggered) {
    handleAlarm();
  }
}

void processKey(char key) {
  Serial.print("Key pressed: ");
  Serial.println(key);
  
  if (key == '*') {  // Сброс введенного пароля
    entered_password = "";
    beep(BEEP_DURATION);
    Serial.println("Password cleared");
  }
  else if (key == '#') {  // Проверка пароля
    if (entered_password == CORRECT_PASSWORD) {
      toggleSystem();
    } else {
      wrongPassword();
    }
    entered_password = "";
  }
  else if (key == 'A' || key == 'B' || key == 'C' || key == 'D') {
    // Игнорируем функциональные клавиши
    beep(BEEP_DURATION);
  }
  else {  // Добавление цифры к паролю
    entered_password += key;
    beep(BEEP_DURATION);
    Serial.print("Current password: ");
    Serial.println(entered_password);
  }
}

void toggleSystem() {
  system_armed = !system_armed;
  alarm_triggered = false;
  
  if (system_armed) {
    Serial.println("System ARMED");
    // Три коротких сигнала при включении
    for (int i = 0; i < 3; i++) {
      beep(BEEP_DURATION);
      delay(200);
    }
    digitalWrite(LED_PIN, HIGH);
  } else {
    Serial.println("System DISARMED");
    // Один длинный сигнал при выключении
    beep(BEEP_DURATION * 2);
    digitalWrite(LED_PIN, LOW);
  }
}

void wrongPassword() {
  Serial.println("Wrong password!");
  // Длинный сигнал ошибки
  tone(BUZZER_PIN, 400);
  delay(ERROR_BEEP_DURATION);
  noTone(BUZZER_PIN);
}

void triggerAlarm() {
  alarm_triggered = true;
  alarm_start_time = millis();
  Serial.println("ALARM TRIGGERED!");
}

void handleAlarm() {
  // Проверяем, не истекло ли время тревоги
  if (millis() - alarm_start_time < ALARM_DURATION) {
    // Мигаем светодиодом и пищим
    digitalWrite(LED_PIN, millis() % 200 < 100);
    tone(BUZZER_PIN, millis() % 400 < 200 ? 800 : 600);
  } else {
    // Выключаем тревогу после истечения времени
    alarm_triggered = false;
    noTone(BUZZER_PIN);
    if (system_armed) {
      digitalWrite(LED_PIN, HIGH);
    }
  }
}
void beep(int duration) {
  tone(BUZZER_PIN, 800);
  delay(duration);
  noTone(BUZZER_PIN);
}
